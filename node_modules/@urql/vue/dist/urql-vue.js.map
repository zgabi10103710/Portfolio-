{"version":3,"file":"urql-vue.js","sources":["../src/useClient.ts","../src/utils.ts","../src/useQuery.ts","../src/useMutation.ts","../src/useSubscription.ts","../src/useClientHandle.ts"],"sourcesContent":["import { App, getCurrentInstance, inject, provide, Ref, isRef, ref } from 'vue';\nimport { Client, ClientOptions } from '@urql/core';\n\nexport function provideClient(opts: ClientOptions | Client | Ref<Client>) {\n  let client: Ref<Client>;\n  if (!isRef(opts)) {\n    client = ref(opts instanceof Client ? opts : new Client(opts));\n  } else {\n    client = opts;\n  }\n\n  provide('$urql', client);\n  return client.value;\n}\n\nexport function install(app: App, opts: ClientOptions | Client | Ref<Client>) {\n  let client: Ref<Client>;\n  if (!isRef(opts)) {\n    client = ref(opts instanceof Client ? opts : new Client(opts));\n  } else {\n    client = opts;\n  }\n  app.provide('$urql', client);\n}\n\nexport function useClient(): Ref<Client> {\n  if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n    throw new Error(\n      'use* functions may only be called during the `setup()` or other lifecycle hooks.'\n    );\n  }\n\n  const client = inject('$urql') as Ref<Client>;\n  if (process.env.NODE_ENV !== 'production' && !client) {\n    throw new Error(\n      'No urql Client was provided. Did you forget to install the plugin or call `provideClient` in a parent?'\n    );\n  }\n\n  return client;\n}\n","import { Ref, isRef } from 'vue';\n\nexport function unwrapPossibleProxy<V>(possibleProxy: V | Ref<V>): V {\n  return possibleProxy && isRef(possibleProxy)\n    ? possibleProxy.value\n    : possibleProxy;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { DocumentNode } from 'graphql';\n\nimport { WatchStopHandle, Ref, ref, watchEffect, reactive, isRef } from 'vue';\n\nimport { Subscription, Source, pipe, subscribe, onEnd } from 'wonka';\n\nimport {\n  Client,\n  AnyVariables,\n  OperationResult,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  Operation,\n  createRequest,\n  GraphQLRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\ntype MaybeRef<T> = T | Ref<T>;\n\nexport type UseQueryArgs<T = any, V extends AnyVariables = AnyVariables> = {\n  query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;\n  requestPolicy?: MaybeRef<RequestPolicy>;\n  context?: MaybeRef<Partial<OperationContext>>;\n  pause?: MaybeRef<boolean>;\n} & (V extends void\n  ? {\n      variables?: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }>;\n    }\n  : V extends { [P in keyof V]: V[P] | null }\n  ? { variables?: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }> }\n  : {\n      variables: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }>;\n    });\n\nexport type QueryPartialState<\n  T = any,\n  V extends AnyVariables = AnyVariables\n> = Partial<OperationResult<T, V>> & { fetching?: boolean };\n\nexport interface UseQueryState<T = any, V extends AnyVariables = AnyVariables> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<T | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  isPaused: Ref<boolean>;\n  resume(): void;\n  pause(): void;\n  executeQuery(opts?: Partial<OperationContext>): UseQueryResponse<T, V>;\n}\n\nexport type UseQueryResponse<\n  T,\n  V extends AnyVariables = AnyVariables\n> = UseQueryState<T, V> & PromiseLike<UseQueryState<T, V>>;\n\nconst watchOptions = {\n  flush: 'pre' as const,\n};\n\nexport function useQuery<T = any, V extends AnyVariables = AnyVariables>(\n  args: UseQueryArgs<T, V>\n): UseQueryResponse<T, V> {\n  return callUseQuery(args);\n}\n\nexport function callUseQuery<T = any, V extends AnyVariables = AnyVariables>(\n  _args: UseQueryArgs<T, V>,\n  client: Ref<Client> = useClient(),\n  stops: WatchStopHandle[] = []\n): UseQueryResponse<T, V> {\n  const args = reactive(_args);\n\n  const data: Ref<T | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  const isPaused: Ref<boolean> = isRef(_args.pause)\n    ? _args.pause\n    : ref(!!_args.pause);\n\n  const request: Ref<GraphQLRequest<T, V>> = ref(\n    createRequest<T, V>(\n      args.query,\n      unwrapPossibleProxy<V>(args.variables as V)\n    ) as any\n  );\n\n  const source: Ref<Source<OperationResult<T, V>> | undefined> = ref();\n\n  stops.push(\n    watchEffect(() => {\n      const newRequest = createRequest<T, V>(\n        args.query,\n        unwrapPossibleProxy<V>(args.variables as V)\n      );\n      if (request.value.key !== newRequest.key) {\n        request.value = newRequest;\n      }\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(() => {\n      source.value = !isPaused.value\n        ? client.value.executeQuery<T, V>(request.value, {\n            requestPolicy: args.requestPolicy,\n            ...args.context,\n          })\n        : undefined;\n    }, watchOptions)\n  );\n\n  const state: UseQueryState<T, V> = {\n    data,\n    stale,\n    error,\n    operation,\n    extensions,\n    fetching,\n    isPaused,\n    executeQuery(opts?: Partial<OperationContext>): UseQueryResponse<T, V> {\n      const s = (source.value = client.value.executeQuery<T, V>(request.value, {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      }));\n\n      return {\n        ...response,\n        then(onFulfilled, onRejected) {\n          let sub: Subscription | void;\n          return new Promise<UseQueryState<T, V>>(resolve => {\n            let hasResult = false;\n            sub = pipe(\n              s,\n              subscribe(() => {\n                if (!state.fetching.value && !state.stale.value) {\n                  if (sub) sub.unsubscribe();\n                  hasResult = true;\n                  resolve(state);\n                }\n              })\n            );\n            if (hasResult) sub.unsubscribe();\n          }).then(onFulfilled, onRejected);\n        },\n      };\n    },\n    pause() {\n      isPaused.value = true;\n    },\n    resume() {\n      isPaused.value = false;\n    },\n  };\n\n  stops.push(\n    watchEffect(\n      onInvalidate => {\n        if (source.value) {\n          fetching.value = true;\n          stale.value = false;\n\n          onInvalidate(\n            pipe(\n              source.value,\n              onEnd(() => {\n                fetching.value = false;\n                stale.value = false;\n              }),\n              subscribe(res => {\n                data.value = res.data;\n                stale.value = !!res.stale;\n                fetching.value = false;\n                error.value = res.error;\n                operation.value = res.operation;\n                extensions.value = res.extensions;\n              })\n            ).unsubscribe\n          );\n        } else {\n          fetching.value = false;\n          stale.value = false;\n        }\n      },\n      {\n        // NOTE: This part of the query pipeline is only initialised once and will need\n        // to do so synchronously\n        flush: 'sync',\n      }\n    )\n  );\n\n  const response: UseQueryResponse<T, V> = {\n    ...state,\n    then(onFulfilled, onRejected) {\n      let sub: Subscription | void;\n      const promise = new Promise<UseQueryState<T, V>>(resolve => {\n        if (!source.value) return resolve(state);\n        let hasResult = false;\n        sub = pipe(\n          source.value,\n          subscribe(() => {\n            if (!state.fetching.value && !state.stale.value) {\n              if (sub) sub.unsubscribe();\n              hasResult = true;\n              resolve(state);\n            }\n          })\n        );\n        if (hasResult) sub.unsubscribe();\n      });\n\n      return promise.then(onFulfilled, onRejected);\n    },\n  };\n\n  return response;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { ref, Ref } from 'vue';\nimport { DocumentNode } from 'graphql';\nimport { pipe, toPromise, take } from 'wonka';\n\nimport {\n  Client,\n  AnyVariables,\n  TypedDocumentNode,\n  CombinedError,\n  Operation,\n  OperationContext,\n  OperationResult,\n  createRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\nexport interface UseMutationState<T, V extends AnyVariables = AnyVariables> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<T | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  executeMutation: (\n    variables: V,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<T>>;\n}\n\nexport type UseMutationResponse<\n  T,\n  V extends AnyVariables = AnyVariables\n> = UseMutationState<T, V>;\n\nexport function useMutation<T = any, V extends AnyVariables = AnyVariables>(\n  query: TypedDocumentNode<T, V> | DocumentNode | string\n): UseMutationResponse<T, V> {\n  return callUseMutation(query);\n}\n\nexport function callUseMutation<T = any, V extends AnyVariables = AnyVariables>(\n  query: TypedDocumentNode<T, V> | DocumentNode | string,\n  client: Ref<Client> = useClient()\n): UseMutationResponse<T, V> {\n  const data: Ref<T | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  return {\n    data,\n    stale,\n    fetching,\n    error,\n    operation,\n    extensions,\n    executeMutation(\n      variables: V,\n      context?: Partial<OperationContext>\n    ): Promise<OperationResult<T, V>> {\n      fetching.value = true;\n\n      return pipe(\n        client.value.executeMutation<T, V>(\n          createRequest<T, V>(query, unwrapPossibleProxy(variables)),\n          context || {}\n        ),\n        take(1),\n        toPromise\n      ).then((res: OperationResult<T, V>) => {\n        data.value = res.data;\n        stale.value = !!res.stale;\n        fetching.value = false;\n        error.value = res.error;\n        operation.value = res.operation;\n        extensions.value = res.extensions;\n        return res;\n      });\n    },\n  };\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, onEnd } from 'wonka';\n\nimport { WatchStopHandle, Ref, ref, watchEffect, reactive, isRef } from 'vue';\n\nimport {\n  Client,\n  AnyVariables,\n  OperationResult,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n  createRequest,\n  GraphQLRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\ntype MaybeRef<T> = T | Ref<T>;\n\nexport type UseSubscriptionArgs<\n  T = any,\n  V extends AnyVariables = AnyVariables\n> = {\n  query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;\n  pause?: MaybeRef<boolean>;\n  context?: MaybeRef<Partial<OperationContext>>;\n} & (V extends void\n  ? {\n      variables?: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }>;\n    }\n  : V extends { [P in keyof V]: V[P] | null }\n  ? { variables?: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }> }\n  : {\n      variables: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }>;\n    });\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\nexport type SubscriptionHandlerArg<T, R> = MaybeRef<SubscriptionHandler<T, R>>;\n\nexport interface UseSubscriptionState<\n  T = any,\n  R = T,\n  V extends AnyVariables = AnyVariables\n> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<R | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  isPaused: Ref<boolean>;\n  resume(): void;\n  pause(): void;\n  executeSubscription(opts?: Partial<OperationContext>): void;\n}\n\nexport type UseSubscriptionResponse<\n  T = any,\n  R = T,\n  V extends AnyVariables = AnyVariables\n> = UseSubscriptionState<T, R, V>;\n\nconst watchOptions = {\n  flush: 'pre' as const,\n};\n\nexport function useSubscription<\n  T = any,\n  R = T,\n  V extends AnyVariables = AnyVariables\n>(\n  args: UseSubscriptionArgs<T, V>,\n  handler?: SubscriptionHandlerArg<T, R>\n): UseSubscriptionResponse<T, R, V> {\n  return callUseSubscription(args, handler);\n}\n\nexport function callUseSubscription<\n  T = any,\n  R = T,\n  V extends AnyVariables = AnyVariables\n>(\n  _args: UseSubscriptionArgs<T, V>,\n  handler?: SubscriptionHandlerArg<T, R>,\n  client: Ref<Client> = useClient(),\n  stops: WatchStopHandle[] = []\n): UseSubscriptionResponse<T, R, V> {\n  const args = reactive(_args);\n\n  const data: Ref<R | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  const scanHandler: Ref<SubscriptionHandler<T, R> | undefined> = ref(handler);\n\n  const isPaused: Ref<boolean> = isRef(_args.pause)\n    ? _args.pause\n    : ref(!!_args.pause);\n\n  const request: Ref<GraphQLRequest<T, V>> = ref(\n    createRequest<T, V>(\n      args.query,\n      unwrapPossibleProxy<V>(args.variables as V)\n    ) as any\n  );\n\n  const source: Ref<Source<OperationResult<T, V>> | undefined> = ref();\n\n  stops.push(\n    watchEffect(() => {\n      const newRequest = createRequest<T, V>(\n        args.query,\n        unwrapPossibleProxy<V>(args.variables as V)\n      );\n      if (request.value.key !== newRequest.key) {\n        request.value = newRequest;\n      }\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(() => {\n      source.value = !isPaused.value\n        ? client.value.executeSubscription<T, V>(request.value, {\n            ...args.context,\n          })\n        : undefined;\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(onInvalidate => {\n      if (source.value) {\n        fetching.value = true;\n\n        onInvalidate(\n          pipe(\n            source.value,\n            onEnd(() => {\n              fetching.value = false;\n            }),\n            subscribe(result => {\n              fetching.value = true;\n              (data.value =\n                result.data !== undefined\n                  ? typeof scanHandler.value === 'function'\n                    ? scanHandler.value(data.value as any, result.data!)\n                    : result.data\n                  : (result.data as any)),\n                (error.value = result.error);\n              extensions.value = result.extensions;\n              stale.value = !!result.stale;\n              operation.value = result.operation;\n            })\n          ).unsubscribe\n        );\n      } else {\n        fetching.value = false;\n      }\n    }, watchOptions)\n  );\n\n  const state: UseSubscriptionState<T, R, V> = {\n    data,\n    stale,\n    error,\n    operation,\n    extensions,\n    fetching,\n    isPaused,\n    executeSubscription(\n      opts?: Partial<OperationContext>\n    ): UseSubscriptionState<T, R, V> {\n      source.value = client.value.executeSubscription<T, V>(request.value, {\n        ...args.context,\n        ...opts,\n      });\n\n      return state;\n    },\n    pause() {\n      isPaused.value = true;\n    },\n    resume() {\n      isPaused.value = false;\n    },\n  };\n\n  return state;\n}\n","import { DocumentNode } from 'graphql';\nimport { AnyVariables, Client, TypedDocumentNode } from '@urql/core';\nimport {\n  WatchStopHandle,\n  getCurrentInstance,\n  onMounted,\n  onBeforeUnmount,\n} from 'vue';\n\nimport { useClient } from './useClient';\n\nimport { callUseQuery, UseQueryArgs, UseQueryResponse } from './useQuery';\n\nimport { callUseMutation, UseMutationResponse } from './useMutation';\n\nimport {\n  callUseSubscription,\n  UseSubscriptionArgs,\n  SubscriptionHandlerArg,\n  UseSubscriptionResponse,\n} from './useSubscription';\n\nexport interface ClientHandle {\n  client: Client;\n\n  useQuery<T = any, V extends AnyVariables = AnyVariables>(\n    args: UseQueryArgs<T, V>\n  ): UseQueryResponse<T, V>;\n\n  useSubscription<T = any, R = T, V extends AnyVariables = AnyVariables>(\n    args: UseSubscriptionArgs<T, V>,\n    handler?: SubscriptionHandlerArg<T, R>\n  ): UseSubscriptionResponse<T, R, V>;\n\n  useMutation<T = any, V extends AnyVariables = AnyVariables>(\n    query: TypedDocumentNode<T, V> | DocumentNode | string\n  ): UseMutationResponse<T, V>;\n}\n\nexport function useClientHandle(): ClientHandle {\n  const client = useClient();\n  const stops: WatchStopHandle[] = [];\n\n  onBeforeUnmount(() => {\n    let stop: WatchStopHandle | void;\n    while ((stop = stops.shift())) stop();\n  });\n\n  const handle: ClientHandle = {\n    client: client.value,\n\n    useQuery<T = any, V extends AnyVariables = AnyVariables>(\n      args: UseQueryArgs<T, V>\n    ): UseQueryResponse<T, V> {\n      return callUseQuery(args, client, stops);\n    },\n\n    useSubscription<T = any, R = T, V extends AnyVariables = AnyVariables>(\n      args: UseSubscriptionArgs<T, V>,\n      handler?: SubscriptionHandlerArg<T, R>\n    ): UseSubscriptionResponse<T, R, V> {\n      return callUseSubscription(args, handler, client, stops);\n    },\n\n    useMutation<T = any, V extends AnyVariables = AnyVariables>(\n      query: TypedDocumentNode<T, V> | DocumentNode | string\n    ): UseMutationResponse<T, V> {\n      return callUseMutation(query, client);\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    onMounted(() => {\n      Object.assign(handle, {\n        useQuery<T = any, V extends AnyVariables = AnyVariables>(\n          args: UseQueryArgs<T, V>\n        ): UseQueryResponse<T, V> {\n          if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n            throw new Error(\n              '`handle.useQuery()` should only be called in the `setup()` or a lifecycle hook.'\n            );\n          }\n\n          return callUseQuery(args, client, stops);\n        },\n\n        useSubscription<T = any, R = T, V extends AnyVariables = AnyVariables>(\n          args: UseSubscriptionArgs<T, V>,\n          handler?: SubscriptionHandlerArg<T, R>\n        ): UseSubscriptionResponse<T, R, V> {\n          if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n            throw new Error(\n              '`handle.useSubscription()` should only be called in the `setup()` or a lifecycle hook.'\n            );\n          }\n\n          return callUseSubscription(args, handler, client, stops);\n        },\n      });\n    });\n  }\n\n  return handle;\n}\n"],"names":["provideClient","opts","client","isRef","ref","Client","provide","install","app","useClient","Error","inject","unwrapPossibleProxy","possibleProxy","watchOptions","flush","useQuery","args","callUseQuery","_args","stops","reactive","data","stale","fetching","error","operation","extensions","isPaused","pause","request","createRequest","query","variables","source","push","watchEffect","newRequest","value","state","executeQuery","s","response","sub","Promise","resolve","hasResult","onInvalidate","subscribe","res","unsubscribe","promise","useMutation","callUseMutation","toPromise","take","executeMutation","context","then","useSubscription","handler","callUseSubscription","scanHandler","result","executeSubscription","useClientHandle","stop","shift","handle","process","env","NODE_ENV","Object","assign"],"mappings":"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"}