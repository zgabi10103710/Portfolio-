{"version":3,"file":"urql-vue.mjs","sources":["../src/useClient.ts","../src/utils.ts","../src/useQuery.ts","../src/useMutation.ts","../src/useSubscription.ts","../src/useClientHandle.ts"],"sourcesContent":["import { App, getCurrentInstance, inject, provide, Ref, isRef, ref } from 'vue';\nimport { Client, ClientOptions } from '@urql/core';\n\nexport function provideClient(opts: ClientOptions | Client | Ref<Client>) {\n  let client: Ref<Client>;\n  if (!isRef(opts)) {\n    client = ref(opts instanceof Client ? opts : new Client(opts));\n  } else {\n    client = opts;\n  }\n\n  provide('$urql', client);\n  return client.value;\n}\n\nexport function install(app: App, opts: ClientOptions | Client | Ref<Client>) {\n  let client: Ref<Client>;\n  if (!isRef(opts)) {\n    client = ref(opts instanceof Client ? opts : new Client(opts));\n  } else {\n    client = opts;\n  }\n  app.provide('$urql', client);\n}\n\nexport function useClient(): Ref<Client> {\n  if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n    throw new Error(\n      'use* functions may only be called during the `setup()` or other lifecycle hooks.'\n    );\n  }\n\n  const client = inject('$urql') as Ref<Client>;\n  if (process.env.NODE_ENV !== 'production' && !client) {\n    throw new Error(\n      'No urql Client was provided. Did you forget to install the plugin or call `provideClient` in a parent?'\n    );\n  }\n\n  return client;\n}\n","import { Ref, isRef } from 'vue';\n\nexport function unwrapPossibleProxy<V>(possibleProxy: V | Ref<V>): V {\n  return possibleProxy && isRef(possibleProxy)\n    ? possibleProxy.value\n    : possibleProxy;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { DocumentNode } from 'graphql';\n\nimport { WatchStopHandle, Ref, ref, watchEffect, reactive, isRef } from 'vue';\n\nimport { Subscription, Source, pipe, subscribe, onEnd } from 'wonka';\n\nimport {\n  Client,\n  AnyVariables,\n  OperationResult,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  Operation,\n  createRequest,\n  GraphQLRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\ntype MaybeRef<T> = T | Ref<T>;\n\nexport type UseQueryArgs<T = any, V extends AnyVariables = AnyVariables> = {\n  query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;\n  requestPolicy?: MaybeRef<RequestPolicy>;\n  context?: MaybeRef<Partial<OperationContext>>;\n  pause?: MaybeRef<boolean>;\n} & (V extends void\n  ? {\n      variables?: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }>;\n    }\n  : V extends { [P in keyof V]: V[P] | null }\n  ? { variables?: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }> }\n  : {\n      variables: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }>;\n    });\n\nexport type QueryPartialState<\n  T = any,\n  V extends AnyVariables = AnyVariables\n> = Partial<OperationResult<T, V>> & { fetching?: boolean };\n\nexport interface UseQueryState<T = any, V extends AnyVariables = AnyVariables> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<T | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  isPaused: Ref<boolean>;\n  resume(): void;\n  pause(): void;\n  executeQuery(opts?: Partial<OperationContext>): UseQueryResponse<T, V>;\n}\n\nexport type UseQueryResponse<\n  T,\n  V extends AnyVariables = AnyVariables\n> = UseQueryState<T, V> & PromiseLike<UseQueryState<T, V>>;\n\nconst watchOptions = {\n  flush: 'pre' as const,\n};\n\nexport function useQuery<T = any, V extends AnyVariables = AnyVariables>(\n  args: UseQueryArgs<T, V>\n): UseQueryResponse<T, V> {\n  return callUseQuery(args);\n}\n\nexport function callUseQuery<T = any, V extends AnyVariables = AnyVariables>(\n  _args: UseQueryArgs<T, V>,\n  client: Ref<Client> = useClient(),\n  stops: WatchStopHandle[] = []\n): UseQueryResponse<T, V> {\n  const args = reactive(_args);\n\n  const data: Ref<T | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  const isPaused: Ref<boolean> = isRef(_args.pause)\n    ? _args.pause\n    : ref(!!_args.pause);\n\n  const request: Ref<GraphQLRequest<T, V>> = ref(\n    createRequest<T, V>(\n      args.query,\n      unwrapPossibleProxy<V>(args.variables as V)\n    ) as any\n  );\n\n  const source: Ref<Source<OperationResult<T, V>> | undefined> = ref();\n\n  stops.push(\n    watchEffect(() => {\n      const newRequest = createRequest<T, V>(\n        args.query,\n        unwrapPossibleProxy<V>(args.variables as V)\n      );\n      if (request.value.key !== newRequest.key) {\n        request.value = newRequest;\n      }\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(() => {\n      source.value = !isPaused.value\n        ? client.value.executeQuery<T, V>(request.value, {\n            requestPolicy: args.requestPolicy,\n            ...args.context,\n          })\n        : undefined;\n    }, watchOptions)\n  );\n\n  const state: UseQueryState<T, V> = {\n    data,\n    stale,\n    error,\n    operation,\n    extensions,\n    fetching,\n    isPaused,\n    executeQuery(opts?: Partial<OperationContext>): UseQueryResponse<T, V> {\n      const s = (source.value = client.value.executeQuery<T, V>(request.value, {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      }));\n\n      return {\n        ...response,\n        then(onFulfilled, onRejected) {\n          let sub: Subscription | void;\n          return new Promise<UseQueryState<T, V>>(resolve => {\n            let hasResult = false;\n            sub = pipe(\n              s,\n              subscribe(() => {\n                if (!state.fetching.value && !state.stale.value) {\n                  if (sub) sub.unsubscribe();\n                  hasResult = true;\n                  resolve(state);\n                }\n              })\n            );\n            if (hasResult) sub.unsubscribe();\n          }).then(onFulfilled, onRejected);\n        },\n      };\n    },\n    pause() {\n      isPaused.value = true;\n    },\n    resume() {\n      isPaused.value = false;\n    },\n  };\n\n  stops.push(\n    watchEffect(\n      onInvalidate => {\n        if (source.value) {\n          fetching.value = true;\n          stale.value = false;\n\n          onInvalidate(\n            pipe(\n              source.value,\n              onEnd(() => {\n                fetching.value = false;\n                stale.value = false;\n              }),\n              subscribe(res => {\n                data.value = res.data;\n                stale.value = !!res.stale;\n                fetching.value = false;\n                error.value = res.error;\n                operation.value = res.operation;\n                extensions.value = res.extensions;\n              })\n            ).unsubscribe\n          );\n        } else {\n          fetching.value = false;\n          stale.value = false;\n        }\n      },\n      {\n        // NOTE: This part of the query pipeline is only initialised once and will need\n        // to do so synchronously\n        flush: 'sync',\n      }\n    )\n  );\n\n  const response: UseQueryResponse<T, V> = {\n    ...state,\n    then(onFulfilled, onRejected) {\n      let sub: Subscription | void;\n      const promise = new Promise<UseQueryState<T, V>>(resolve => {\n        if (!source.value) return resolve(state);\n        let hasResult = false;\n        sub = pipe(\n          source.value,\n          subscribe(() => {\n            if (!state.fetching.value && !state.stale.value) {\n              if (sub) sub.unsubscribe();\n              hasResult = true;\n              resolve(state);\n            }\n          })\n        );\n        if (hasResult) sub.unsubscribe();\n      });\n\n      return promise.then(onFulfilled, onRejected);\n    },\n  };\n\n  return response;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { ref, Ref } from 'vue';\nimport { DocumentNode } from 'graphql';\nimport { pipe, toPromise, take } from 'wonka';\n\nimport {\n  Client,\n  AnyVariables,\n  TypedDocumentNode,\n  CombinedError,\n  Operation,\n  OperationContext,\n  OperationResult,\n  createRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\nexport interface UseMutationState<T, V extends AnyVariables = AnyVariables> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<T | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  executeMutation: (\n    variables: V,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<T>>;\n}\n\nexport type UseMutationResponse<\n  T,\n  V extends AnyVariables = AnyVariables\n> = UseMutationState<T, V>;\n\nexport function useMutation<T = any, V extends AnyVariables = AnyVariables>(\n  query: TypedDocumentNode<T, V> | DocumentNode | string\n): UseMutationResponse<T, V> {\n  return callUseMutation(query);\n}\n\nexport function callUseMutation<T = any, V extends AnyVariables = AnyVariables>(\n  query: TypedDocumentNode<T, V> | DocumentNode | string,\n  client: Ref<Client> = useClient()\n): UseMutationResponse<T, V> {\n  const data: Ref<T | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  return {\n    data,\n    stale,\n    fetching,\n    error,\n    operation,\n    extensions,\n    executeMutation(\n      variables: V,\n      context?: Partial<OperationContext>\n    ): Promise<OperationResult<T, V>> {\n      fetching.value = true;\n\n      return pipe(\n        client.value.executeMutation<T, V>(\n          createRequest<T, V>(query, unwrapPossibleProxy(variables)),\n          context || {}\n        ),\n        take(1),\n        toPromise\n      ).then((res: OperationResult<T, V>) => {\n        data.value = res.data;\n        stale.value = !!res.stale;\n        fetching.value = false;\n        error.value = res.error;\n        operation.value = res.operation;\n        extensions.value = res.extensions;\n        return res;\n      });\n    },\n  };\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, onEnd } from 'wonka';\n\nimport { WatchStopHandle, Ref, ref, watchEffect, reactive, isRef } from 'vue';\n\nimport {\n  Client,\n  AnyVariables,\n  OperationResult,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n  createRequest,\n  GraphQLRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\ntype MaybeRef<T> = T | Ref<T>;\n\nexport type UseSubscriptionArgs<\n  T = any,\n  V extends AnyVariables = AnyVariables\n> = {\n  query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;\n  pause?: MaybeRef<boolean>;\n  context?: MaybeRef<Partial<OperationContext>>;\n} & (V extends void\n  ? {\n      variables?: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }>;\n    }\n  : V extends { [P in keyof V]: V[P] | null }\n  ? { variables?: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }> }\n  : {\n      variables: MaybeRef<{ [K in keyof V]: MaybeRef<V[K]> }>;\n    });\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\nexport type SubscriptionHandlerArg<T, R> = MaybeRef<SubscriptionHandler<T, R>>;\n\nexport interface UseSubscriptionState<\n  T = any,\n  R = T,\n  V extends AnyVariables = AnyVariables\n> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<R | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  isPaused: Ref<boolean>;\n  resume(): void;\n  pause(): void;\n  executeSubscription(opts?: Partial<OperationContext>): void;\n}\n\nexport type UseSubscriptionResponse<\n  T = any,\n  R = T,\n  V extends AnyVariables = AnyVariables\n> = UseSubscriptionState<T, R, V>;\n\nconst watchOptions = {\n  flush: 'pre' as const,\n};\n\nexport function useSubscription<\n  T = any,\n  R = T,\n  V extends AnyVariables = AnyVariables\n>(\n  args: UseSubscriptionArgs<T, V>,\n  handler?: SubscriptionHandlerArg<T, R>\n): UseSubscriptionResponse<T, R, V> {\n  return callUseSubscription(args, handler);\n}\n\nexport function callUseSubscription<\n  T = any,\n  R = T,\n  V extends AnyVariables = AnyVariables\n>(\n  _args: UseSubscriptionArgs<T, V>,\n  handler?: SubscriptionHandlerArg<T, R>,\n  client: Ref<Client> = useClient(),\n  stops: WatchStopHandle[] = []\n): UseSubscriptionResponse<T, R, V> {\n  const args = reactive(_args);\n\n  const data: Ref<R | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  const scanHandler: Ref<SubscriptionHandler<T, R> | undefined> = ref(handler);\n\n  const isPaused: Ref<boolean> = isRef(_args.pause)\n    ? _args.pause\n    : ref(!!_args.pause);\n\n  const request: Ref<GraphQLRequest<T, V>> = ref(\n    createRequest<T, V>(\n      args.query,\n      unwrapPossibleProxy<V>(args.variables as V)\n    ) as any\n  );\n\n  const source: Ref<Source<OperationResult<T, V>> | undefined> = ref();\n\n  stops.push(\n    watchEffect(() => {\n      const newRequest = createRequest<T, V>(\n        args.query,\n        unwrapPossibleProxy<V>(args.variables as V)\n      );\n      if (request.value.key !== newRequest.key) {\n        request.value = newRequest;\n      }\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(() => {\n      source.value = !isPaused.value\n        ? client.value.executeSubscription<T, V>(request.value, {\n            ...args.context,\n          })\n        : undefined;\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(onInvalidate => {\n      if (source.value) {\n        fetching.value = true;\n\n        onInvalidate(\n          pipe(\n            source.value,\n            onEnd(() => {\n              fetching.value = false;\n            }),\n            subscribe(result => {\n              fetching.value = true;\n              (data.value =\n                result.data !== undefined\n                  ? typeof scanHandler.value === 'function'\n                    ? scanHandler.value(data.value as any, result.data!)\n                    : result.data\n                  : (result.data as any)),\n                (error.value = result.error);\n              extensions.value = result.extensions;\n              stale.value = !!result.stale;\n              operation.value = result.operation;\n            })\n          ).unsubscribe\n        );\n      } else {\n        fetching.value = false;\n      }\n    }, watchOptions)\n  );\n\n  const state: UseSubscriptionState<T, R, V> = {\n    data,\n    stale,\n    error,\n    operation,\n    extensions,\n    fetching,\n    isPaused,\n    executeSubscription(\n      opts?: Partial<OperationContext>\n    ): UseSubscriptionState<T, R, V> {\n      source.value = client.value.executeSubscription<T, V>(request.value, {\n        ...args.context,\n        ...opts,\n      });\n\n      return state;\n    },\n    pause() {\n      isPaused.value = true;\n    },\n    resume() {\n      isPaused.value = false;\n    },\n  };\n\n  return state;\n}\n","import { DocumentNode } from 'graphql';\nimport { AnyVariables, Client, TypedDocumentNode } from '@urql/core';\nimport {\n  WatchStopHandle,\n  getCurrentInstance,\n  onMounted,\n  onBeforeUnmount,\n} from 'vue';\n\nimport { useClient } from './useClient';\n\nimport { callUseQuery, UseQueryArgs, UseQueryResponse } from './useQuery';\n\nimport { callUseMutation, UseMutationResponse } from './useMutation';\n\nimport {\n  callUseSubscription,\n  UseSubscriptionArgs,\n  SubscriptionHandlerArg,\n  UseSubscriptionResponse,\n} from './useSubscription';\n\nexport interface ClientHandle {\n  client: Client;\n\n  useQuery<T = any, V extends AnyVariables = AnyVariables>(\n    args: UseQueryArgs<T, V>\n  ): UseQueryResponse<T, V>;\n\n  useSubscription<T = any, R = T, V extends AnyVariables = AnyVariables>(\n    args: UseSubscriptionArgs<T, V>,\n    handler?: SubscriptionHandlerArg<T, R>\n  ): UseSubscriptionResponse<T, R, V>;\n\n  useMutation<T = any, V extends AnyVariables = AnyVariables>(\n    query: TypedDocumentNode<T, V> | DocumentNode | string\n  ): UseMutationResponse<T, V>;\n}\n\nexport function useClientHandle(): ClientHandle {\n  const client = useClient();\n  const stops: WatchStopHandle[] = [];\n\n  onBeforeUnmount(() => {\n    let stop: WatchStopHandle | void;\n    while ((stop = stops.shift())) stop();\n  });\n\n  const handle: ClientHandle = {\n    client: client.value,\n\n    useQuery<T = any, V extends AnyVariables = AnyVariables>(\n      args: UseQueryArgs<T, V>\n    ): UseQueryResponse<T, V> {\n      return callUseQuery(args, client, stops);\n    },\n\n    useSubscription<T = any, R = T, V extends AnyVariables = AnyVariables>(\n      args: UseSubscriptionArgs<T, V>,\n      handler?: SubscriptionHandlerArg<T, R>\n    ): UseSubscriptionResponse<T, R, V> {\n      return callUseSubscription(args, handler, client, stops);\n    },\n\n    useMutation<T = any, V extends AnyVariables = AnyVariables>(\n      query: TypedDocumentNode<T, V> | DocumentNode | string\n    ): UseMutationResponse<T, V> {\n      return callUseMutation(query, client);\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    onMounted(() => {\n      Object.assign(handle, {\n        useQuery<T = any, V extends AnyVariables = AnyVariables>(\n          args: UseQueryArgs<T, V>\n        ): UseQueryResponse<T, V> {\n          if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n            throw new Error(\n              '`handle.useQuery()` should only be called in the `setup()` or a lifecycle hook.'\n            );\n          }\n\n          return callUseQuery(args, client, stops);\n        },\n\n        useSubscription<T = any, R = T, V extends AnyVariables = AnyVariables>(\n          args: UseSubscriptionArgs<T, V>,\n          handler?: SubscriptionHandlerArg<T, R>\n        ): UseSubscriptionResponse<T, R, V> {\n          if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n            throw new Error(\n              '`handle.useSubscription()` should only be called in the `setup()` or a lifecycle hook.'\n            );\n          }\n\n          return callUseSubscription(args, handler, client, stops);\n        },\n      });\n    });\n  }\n\n  return handle;\n}\n"],"names":["provideClient","opts","Client","client","provide","value","install","app","useClient","process","NODE_ENV","getCurrentInstance","inject","env","unwrapPossibleProxy","possibleProxy","flush","useQuery","args","callUseQuery","stops","reactive","_args","data","ref","stale","fetching","error","operation","pause","extensions","query","variables","isPaused","isRef","push","watchEffect","createRequest","source","newRequest","key","watchOptions","executeQuery","request","requestPolicy","context","response","sub","subscribe","hasResult","resolve","state","unsubscribe","res","then","onRejected","Promise","callUseMutation","toPromise","take","useSubscription","handler","callUseSubscription","scanHandler","executeSubscription","undefined","result","onBeforeUnmount","stop","handle","useClientHandle","useMutation"],"mappings":"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"}