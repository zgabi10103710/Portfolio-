import { DocumentNode } from 'graphql';
import { WatchStopHandle, Ref } from 'vue';
import { Client, AnyVariables, TypedDocumentNode, CombinedError, OperationContext, Operation } from '@urql/core';
type MaybeRef<T> = T | Ref<T>;
export type UseSubscriptionArgs<T = any, V extends AnyVariables = AnyVariables> = {
    query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;
    pause?: MaybeRef<boolean>;
    context?: MaybeRef<Partial<OperationContext>>;
} & (V extends void ? {
    variables?: MaybeRef<{
        [K in keyof V]: MaybeRef<V[K]>;
    }>;
} : V extends {
    [P in keyof V]: V[P] | null;
} ? {
    variables?: MaybeRef<{
        [K in keyof V]: MaybeRef<V[K]>;
    }>;
} : {
    variables: MaybeRef<{
        [K in keyof V]: MaybeRef<V[K]>;
    }>;
});
export type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;
export type SubscriptionHandlerArg<T, R> = MaybeRef<SubscriptionHandler<T, R>>;
export interface UseSubscriptionState<T = any, R = T, V extends AnyVariables = AnyVariables> {
    fetching: Ref<boolean>;
    stale: Ref<boolean>;
    data: Ref<R | undefined>;
    error: Ref<CombinedError | undefined>;
    extensions: Ref<Record<string, any> | undefined>;
    operation: Ref<Operation<T, V> | undefined>;
    isPaused: Ref<boolean>;
    resume(): void;
    pause(): void;
    executeSubscription(opts?: Partial<OperationContext>): void;
}
export type UseSubscriptionResponse<T = any, R = T, V extends AnyVariables = AnyVariables> = UseSubscriptionState<T, R, V>;
export declare function useSubscription<T = any, R = T, V extends AnyVariables = AnyVariables>(args: UseSubscriptionArgs<T, V>, handler?: SubscriptionHandlerArg<T, R>): UseSubscriptionResponse<T, R, V>;
export declare function callUseSubscription<T = any, R = T, V extends AnyVariables = AnyVariables>(_args: UseSubscriptionArgs<T, V>, handler?: SubscriptionHandlerArg<T, R>, client?: Ref<Client>, stops?: WatchStopHandle[]): UseSubscriptionResponse<T, R, V>;
export {};
